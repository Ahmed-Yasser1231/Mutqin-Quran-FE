import React, { useState } from 'react';
import {
  Box,
  Button,
  Paper,
  Typography,
  Alert,
  CircularProgress,
  Divider,
  Grid,
  Card,
  CardContent
} from '@mui/material';
import authService from '../auth/authService.js';
import userProfileService from './userProfileService.js';

/**
 * Test component to demonstrate the token storage and profile API integration
 * This component shows how the login saves the token and how to call the profile API
 */
export default function TokenTestComponent() {
  const [loginResult, setLoginResult] = useState(null);
  const [profileResult, setProfileResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [storedToken, setStoredToken] = useState(null);

  // Test login with sample credentials
  const testLogin = async () => {
    setIsLoading(true);
    setLoginResult(null);
    
    try {
      // You can modify these test credentials
      const result = await authService.login('test@example.com', 'password123');
      setLoginResult(result);
      
      // Check stored token
      const token = authService.getToken();
      setStoredToken(token);
    } catch (error) {
      setLoginResult({
        success: false,
        error: 'ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ: ' + error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Test profile API call
  const testProfileAPI = async () => {
    setIsLoading(true);
    setProfileResult(null);
    
    try {
      const result = await userProfileService.getUserProfile();
      setProfileResult(result);
    } catch (error) {
      setProfileResult({
        success: false,
        error: 'ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูููู ุงูุดุฎุตู: ' + error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Check current token
  const checkStoredToken = () => {
    const token = authService.getToken();
    setStoredToken(token);
    
    alert(`
      Token: ${token || 'ูุง ููุฌุฏ'}
      Authenticated: ${authService.isAuthenticated()}
      ููุงุญุธุฉ: ูุง ูุญูุธ ุจูุงูุงุช ุงููุณุชุฎุฏู ูู localStorageุ ูุญุตู ุนูููุง ูู Profile API
    `);
  };

  // Clear auth data
  const clearAuthData = () => {
    authService.logout();
    setStoredToken(null);
    setLoginResult(null);
    setProfileResult(null);
  };

  return (
    <Box p={3}>
      <Typography variant="h4" gutterBottom>
        ุงุฎุชุจุงุฑ ุงูุชุฏูู ุงูุตุญูุญ: Login โ Token โ Profile API
      </Typography>
      
      <Typography variant="body1" color="text.secondary" mb={3}>
        ุงูุชุฏูู ุงูุตุญูุญ: ุชุณุฌูู ุงูุฏุฎูู โ ุญูุธ Token โ ุงุณุชุฏุนุงุก Profile API โ ุนุฑุถ ุงูุจูุงูุงุช
      </Typography>

      <Grid container spacing={3}>
        {/* Test Controls */}
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ุฃุฏูุงุช ุงูุงุฎุชุจุงุฑ
              </Typography>
              
              <Box display="flex" flexDirection="column" gap={2}>
                <Button
                  variant="contained"
                  onClick={testLogin}
                  disabled={isLoading}
                  fullWidth
                >
                  {isLoading ? <CircularProgress size={20} /> : 'ุงุฎุชุจุงุฑ ุชุณุฌูู ุงูุฏุฎูู'}
                </Button>
                
                <Button
                  variant="contained"
                  color="secondary"
                  onClick={testProfileAPI}
                  disabled={isLoading || !authService.isAuthenticated()}
                  fullWidth
                >
                  {isLoading ? <CircularProgress size={20} /> : 'ุงุฎุชุจุงุฑ API ุงูููู ุงูุดุฎุตู'}
                </Button>
                
                <Button
                  variant="outlined"
                  onClick={checkStoredToken}
                  fullWidth
                >
                  ูุญุต Token ุงููุญููุธ
                </Button>
                
                <Button
                  variant="outlined"
                  color="error"
                  onClick={clearAuthData}
                  fullWidth
                >
                  ูุณุญ ุจูุงูุงุช ุงููุตุงุฏูุฉ
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Results Display */}
        <Grid item xs={12} md={8}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              ุงููุชุงุฆุฌ
            </Typography>

            {/* Current Token Status */}
            <Box mb={2}>
              <Typography variant="subtitle2" gutterBottom>
                ุญุงูุฉ Token ุงูุญุงูู:
              </Typography>
              <Alert severity={authService.isAuthenticated() ? 'success' : 'warning'}>
                {authService.isAuthenticated() 
                  ? `ูุตุงุฏู โ - Token: ${storedToken?.substring(0, 50)}...`
                  : 'ุบูุฑ ูุตุงุฏู - ูุง ููุฌุฏ token'
                }
              </Alert>
              <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
                ููุงุญุธุฉ: ุจูุงูุงุช ุงููุณุชุฎุฏู ูุชู ุฌูุจูุง ูู Profile APIุ ูุง ุชูุญูุธ ูู localStorage
              </Typography>
            </Box>

            <Divider sx={{ my: 2 }} />

            {/* Login Result */}
            {loginResult && (
              <Box mb={2}>
                <Typography variant="subtitle2" gutterBottom>
                  ูุชูุฌุฉ ุชุณุฌูู ุงูุฏุฎูู:
                </Typography>
                <Alert severity={loginResult.success ? 'success' : 'error'}>
                  {loginResult.success ? (
                    <div>
                      <strong>ูุฌุญ ุชุณุฌูู ุงูุฏุฎูู!</strong>
                      <br />
                      ุงูุฑุณุงูุฉ: {loginResult.message}
                      <br />
                      Token ูุญููุธ: {storedToken ? 'ูุนู โ' : 'ูุง โ'}
                    </div>
                  ) : (
                    <div>
                      <strong>ูุดู ุชุณุฌูู ุงูุฏุฎูู</strong>
                      <br />
                      ุงูุฎุทุฃ: {loginResult.error}
                    </div>
                  )}
                </Alert>
              </Box>
            )}

            {/* Profile Result */}
            {profileResult && (
              <Box mb={2}>
                <Typography variant="subtitle2" gutterBottom>
                  ูุชูุฌุฉ API ุงูููู ุงูุดุฎุตู:
                </Typography>
                <Alert severity={profileResult.success ? 'success' : 'error'}>
                  {profileResult.success ? (
                    <div>
                      <strong>ุชู ุฌูุจ ุงูููู ุงูุดุฎุตู ุจูุฌุงุญ!</strong>
                      <br />
                      ุงูุจูุงูุงุช: {JSON.stringify(profileResult.data, null, 2)}
                    </div>
                  ) : (
                    <div>
                      <strong>ูุดู ุฌูุจ ุงูููู ุงูุดุฎุตู</strong>
                      <br />
                      ุงูุฎุทุฃ: {profileResult.error}
                      <br />
                      ุงูููุฏ: {profileResult.code}
                    </div>
                  )}
                </Alert>
              </Box>
            )}
          </Paper>
        </Grid>
      </Grid>

      {/* Instructions */}
      <Paper sx={{ p: 2, mt: 3, bgcolor: 'grey.50' }}>
        <Typography variant="h6" gutterBottom>
          ุชุนูููุงุช ุงูุงุณุชุฎุฏุงู - ุงูุชุฏูู ุงูุตุญูุญ:
        </Typography>
        <Typography variant="body2" component="div">
          <ol>
            <li><strong>ุชุณุฌูู ุงูุฏุฎูู:</strong> ุงุถุบุท "ุงุฎุชุจุงุฑ ุชุณุฌูู ุงูุฏุฎูู" โ ูุชู ุญูุธ Token ููุท</li>
            <li><strong>ุงุณุชุฏุนุงุก Profile API:</strong> ุงุถุบุท "ุงุฎุชุจุงุฑ API ุงูููู ุงูุดุฎุตู" โ ูุฑุณู Token ููุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏู</li>
            <li><strong>ุนุฑุถ ุงูุจูุงูุงุช:</strong> ุงูุจูุงูุงุช ุชูุนุฑุถ ูู ุงูุงุณุชุฌุงุจุฉ ูุจุงุดุฑุฉุ ูุง ุชูุญูุธ ูู localStorage</li>
            <li><strong>ูุญุต Token:</strong> ุงุณุชุฎุฏู "ูุญุต Token ุงููุญููุธ" ูุฑุคูุฉ Token ุงููุญููุธ ููุท</li>
          </ol>
          <br />
          <strong>๐ฏ ุงูููุฑุฉ ุงูุฃุณุงุณูุฉ:</strong>
          <ul>
            <li>โ Login API โ ุญูุธ Token ููุท</li>
            <li>โ Profile API โ ุงุณุชุฎุฏุงู Token ูุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏู</li>
            <li>โ ูุง ูุญูุธ ุจูุงูุงุช ุงููุณุชุฎุฏู ูู localStorage</li>
            <li>โ ุงูุจูุงูุงุช ุชูุฌูุจ ุญุณุจ ุงูุญุงุฌุฉ ูู ุงูุฎุงุฏู</li>
          </ul>
          <br />
          <strong>ููุงุญุธุฉ:</strong> ูุฌุจ ุฃู ูููู ุงูุฎุงุฏู ุงูุฎููู ูุนูู ุนูู http://localhost:8080
        </Typography>
      </Paper>
    </Box>
  );
}